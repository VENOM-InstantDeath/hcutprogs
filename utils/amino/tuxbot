#!/usr/bin/env python3

#   This file is part of hkprogs

#   hkprogs is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.

#   hkprogs is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.

__author__ = "Darth Venom"
__credits__ = ["Darth Venom", "Antitesista"]
__license__ = "GPL"
__maintainer__ = "Darth Venom"

import amino
from getpass import getpass
from tokens import tokenize
from time import sleep
from threading import Thread
from nums import numres
import json
import os
import random
import search
from mod.help import categs, commands
from mod.func import chats, public_chats
from mod.cmd import params

HackingUtils = "234960818"
GameDevelopers = "1083667"
HarryPotter = "229032048"
Liberales = "196524014"
CyberHacking = "68427685"
CHAT = "03ee80fc-71b4-424e-a9cb-95b89f328a35"
BOT = "23e2ffc7-592a-45dd-a2d8-e54c187a5a2b"
print("Directions declared")

ACHAT = BOT
COMMS = ["HackingUtils", "GameDevelopers", "HarryPotter", "CyberHacking", "DarthVenoms"]
COMM = HackingUtils

cli = amino.Client()

if not "creds" in os.listdir():
    F = open("creds", "w+");creds = {}
    creds["email"]=input("\nintroduce un correo electrónico: ")
    creds["pass"]=getpass("introduce una contraseña: ")
    F.write(json.dumps(creds, indent=4));F.close()
    print("Created creds file")

F = open("creds", "r");creds=json.load(F);F.close()
cli.login(**creds)
print("Logged in")

#Custom commands
if "custom" in os.listdir():
    F = open("custom", "r+")
    custom=json.load(F)
else:
    F = open("custom", "w+")
    custom={}
    F.write(json.dumps(custom, indent=4))
    F.close()
    F = open("custom", "r+")
    custom=json.load(F)

print("Loaded custom commands")

sub = amino.SubClient(COMM, cli.profile)
print("Bot online")

old = []
stop = False
version = "2.2.7"
inum = numres()
Gstop = True
SU = ["83e9eb60-3b0e-4009-8b67-dbe432ddae14", "21cf7113-ab47-4995-b5da-9d6e3f6ba102"]
blkl = ['/eval'] # blacklist

chatT, chatI = chats("HackingUtils", COMMS, sub)

SS = object

####################################################################################################

LOG = {}

@cli.callbacks.event("on_text_message")
def on_text_message(data):
    global LOG
    if len(LOG) == 50:
        LOG = {}
    LOG[data.message.messageId] = data.message.content

@cli.callbacks.event("on_delete_message")
def on_delete_message(data):
    if (data.comId == int(COMM)) and (data.message.messageId in LOG) and not Gstop:
        sub.send_message(data.message.chatId, f"{data.message.author.nickname}:\n{LOG[data.message.messageId]}")

def refresh():
    while True:
        sleep(300)
        cli.socket.close()
        cli.socket.start()
        print(refresh)

REFRESH = Thread(target=refresh)
REFRESH.start()

while True:
    msg = sub.get_chat_messages(ACHAT, 2)
    if old == msg.content:
        continue

    for i in msg.content:

        if i in old:
            continue
        if i == None:
            continue

        if i.startswith("/") and not "builtin" in blkl:
            print(tokenize(i))
            T = tokenize(i)

            if T[0] == "/help" and not T[0] in blkl:
                if len(T) == 1:
                    s = "[cb]HackingUtils's Bot\n\n"
                    for x in categs:
                        s += "[b]{}\n".format(x)
                    s += "\n\nPara más información sobre una categoría, pásala como argumento de /help. Si quieres información sobre todas las categorías, usa la opción --all"
                    sub.send_message(ACHAT, s)
                    continue
                if len(T) > 2:
                    sub.send_message(ACHAT, params(excp="too_much_args"))
                    continue
                if T[1] == "--all":
                    s = "[cb]HackingUtils's Bot\n\n"
                    for x in categs:
                        s += "\n[B]{}\n\n".format(x)
                        for e in commands:
                            if x == commands[e][1]:
                                s += "{}: {}\n".format(e, commands[e][0])
                    s += "Escrito por Darth Venom."
                    sub.send_message(ACHAT, s)
                if T[1] in categs:
                    s = "[cb]HackingUtils's bot\n\n[b]{}\n\n".format(T[1])
                    for x in commands:
                        if commands[x][1] == T[1]:
                            s += "{}: {}\n".format(x, commands[x][0])
                    s += "\nEscrito por Darth Venom"
                    sub.send_message(ACHAT, s)
                if T[1] in commands:
                    s = "[cb]HackingUtils's bot\n\n[b]{}\n\n{}\n\nEscrito por Darth Venom".format(T[1], commands[T[1]][2])
                    sub.send_message(ACHAT, s)
                continue

            if T[0] == "/hi" and not T[0] in blkl:
                x = params(1, 1, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue
                sub.send_message(ACHAT, "Hi!")
                continue

            if T[0] == "/version" and not T[0] in blkl:
                x = params(1, 1, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue
                sub.send_message(ACHAT, version)
                continue

            if T[0] == "/di" and not T[0] in blkl:
                x = params(2, 3, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue
                if len(T) == 1:
                    sub.send_message(ACHAT, excp["lack_of_args"])
                    continue
                sub.send_message(ACHAT, T[1].replace('"', ""))
                if len(T) == 3 and T[2] == "--autodel":
                    sub.delete_message(ACHAT, msg.messageId[msg.content.index(i)])
                continue

            if T[0] == "/meme" and not T[0] in blkl:
                x = params(1, 3, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue
                if len(T) == 2:
                    x=search.search(tokenize(T[1]))
                    print(x)
                    if x == "Plantilla no encontrada":
                        sub.send_message(ACHAT, x)
                        continue
                    os.chdir("Meme/Plantillas")
                    x=open(x, "rb")
                    sub.send_message(ACHAT, file=x, fileType="image")
                    x.close()
                    os.chdir("../..")
                    if not len(T) == 3:
                        continue
                if len(T) == 3 and T[2] == "--autodel":
                    sub.delete_message(ACHAT, msg.messageId[msg.content.index(i)])
                    continue

                os.chdir("Meme")
                x=[]
                for e in os.listdir():
                    if os.path.isdir(e):
                        continue
                    x.append(e)
                x=random.choice(x)
                x=open(x, "rb")
                sub.send_message(ACHAT, file=x, fileType="image")
                x.close()
                os.chdir("..")

                continue

            if T[0] == "/public_chats" and not T[0] in blkl:
                x = params(1, 1, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue

                s = public_chats(chatT)
                sub.send_message(ACHAT, s[0])
                continue

            if T[0] == "/info" and not T[0] in blkl:
                x = params(2, 2, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue
                print("Searching for user {}".format(T[1]))
                user = sub.search_users(T[1])
                print("Done Searching")
                if user.json == []:
                    print("User not found")
                    sub.send_message(ACHAT, "User not found")
                    continue
                sub.send_message(ACHAT, """[cb]{}'s info

ID: {}
Publicaciones: {}
Online: {}
Nivel: {}
Reputación: {}

[c]Biografía

{}""".format(user.json[0]["nickname"], user.json[0]["uid"], user.json[0]["blogsCount"], bool(int(user.json[0]["onlineStatus"])), user.json[0]["level"], user.json[0]["reputation"], user.json[0]["content"]))
                continue

            if T[0] == "/goto" and not T[0] in blkl:

                x = params(2, 2, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue
                if not T[1].isdigit():
                    sub.send_message(ACHAT, excp["intbs"])
                    continue
                ACHATT = ACHAT
                ACHAT = chatI[int(T[1])]
                print(ACHAT)
                try:
                    sub.join_chat(ACHAT)
                    print("Joined")
                    sub.delete_message(ACHATT, msg.messageId[msg.content.index(i)])
                    s = "Bot went to {}".format(chatT[int(T[1])])
                except:
                    ACHAT = ACHATT
                    sub.send_message(ACHAT, "Permiso denegado")
                    chatI.pop(int(T[1]))
                    chatT.pop(int(T[1]))
                try:
                    sub.send_message(ACHATT, s, 100)
                except:
                    pass
                continue

            if T[0] == "/mv" and not T[0] in blkl:

                x = params(2, 2, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue

                if T[1] in COMMS:
                    COMM = eval(T[1])
                else:
                    sub.send_message(ACHAT, "Comunidad inexistente.")
                    continue

                sub.send_message(ACHAT, "Yendo a {}".format(COMM))
                sub1 = amino.SubClient(COMM, cli.profile)

                chatT, chatI = chats(COMM, COMMS, sub1)
                s = public_chats(chatT)
                sub.send_message(ACHAT, s[0])

                sub.send_message(ACHAT, "Selecciona un chat por su número.")
                old1 = []
                ctrl = False
                while True:
                    msg = sub.get_chat_messages(ACHAT, 2)
                    if old1 == msg.content:
                        continue
                    for i in msg.content:
                        if i in old:
                            continue
                        if i == None:
                            continue
        
                        elif i.startswith("/"):
                            i = i[1:]
                            print(i)
                            if not i.isdigit():
                                if i == "back":
                                    del sub1
                                    ctrl = True
                                    break
                                sub.send_message(ACHAT, "Numeric argument expected, got string.")
                                continue
                            if int(i) >= s[1]:
                                sub.send_message(ACHAT, "IndexError. Intenta nuevamente.")
                                continue
                            sub.send_message(ACHAT, "Selected {}".format(i))
                            ACHAT = chatI[int(i)]
                            sub1.join_chat(ACHAT)
                            sub = sub1
                            sub.send_message(ACHAT, "I'm here")
                            del sub1
                            ctrl = True
                            break
                    old1 = msg.content
                    if ctrl == True:
                        break
                del ctrl
                continue

            if T[0] == "/guard" and not T[0] in blkl:

                x = params(2, 2, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue

                if T[1] == "on":

                    try:
                        sub.send_message(ACHAT, "Guard is on", 100)
                    except:
                        pass
                    Gstop = False

                if T[1] == "off":

                    try:
                        sub.send_message(ACHAT, "Guard is off", 100)
                    except:
                        pass
                    Gstop = True
                continue

            if T[0] == "/id" and not T[0] in blkl:

                x = params(1, 1, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue

                sub.send_message(ACHAT, "chatId: {}\n\ncomId: {}".format(ACHAT, COMM))
                continue

            if T[0] == "/eval" and not T[0] in blkl:

                x = params(1, 2, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue

                expp = ""
                for x in T[1:]:
                    expp += x
                try:
                    expp = inum.inum(expp)
                    sub.send_message(ACHAT, str(expp))
                except:
                    sub.send_message(ACHAT, "An error ocurred during the operation.")
                    continue
                continue

            if T[0] == "/teach" and not T[0] in blkl:

                x = params(4, 5, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue
                T[1] = T[1].replace('"', '')
                T[3] = T[3].replace('"', '')
                if len(T) == 5 and T[4] == "--private" and T[2] == "=":
                    if T[3].startswith("/di"):
                        sub.send_message(ACHAT,"Using /di on custom commands is not allowed")
                        continue
                    if T[3].startswith("."):
                        sub.send_message(ACHAT,"Using . at start on custom commands is not allowed")
                        continue
                    custom[T[1]] = [T[3], "private", msg.author.userId[msg.content.index(i)]]
                    F.seek(0);F.truncate()
                    F.write(json.dumps(custom, indent=4))
                    FCP = open("custom.cp", "w+");FCP.write(json.dumps(custom,indent=4));FCP.close()
                    continue
                if T[2] == "=":
                    if T[3].startswith("/di"):
                        sub.send_message(ACHAT,"Using /di on custom commands is not allowed")
                        continue
                    if T[3].startswith("."):
                        sub.send_message(ACHAT,"Using . at start on custom commands is not allowed")
                        continue
                    custom[T[1]] = [T[3], "public"]
                    F.seek(0);F.truncate()
                    F.write(json.dumps(custom, indent=4))
                    FCP = open("custom.cp", "w+");FCP.write(json.dumps(custom,indent=4))
                else:
                    sub.send_message(ACHAT, "Wrong Syntax.")
                continue

            if T[0] == "/stop" and not T[0] in blkl:
                x = params(1, 1, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue

                sub.delete_message(ACHAT, msg.messageId[msg.content.index(i)])
                stop = True

            if T[0] == "/blkl" and msg.author.userId[msg.content.index(i)] in SU:

                x = params(2, 3, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue

                if T[1] == "list":

                    print(blkl)
                    liscu = ""
                    liscu += "[cb]Black list\n\n"
                    for e in blkl:
                        liscu += "{}\n".format(e)
                    sub.send_message(ACHAT, liscu)

                if T[1] == "add":

                    if len(T) == 2:
                        sub.send_message(ACHAT, excp["lack_of_args"])
                        continue
                    blkl.append(T[2])
                    try:
                        sub.send_message(ACHAT, "Added {}".format(T[2]), 100)
                    except:
                        pass

                if T[1] == "del":

                    if len(T) == 2:
                        sub.send_message(ACHAT, excp["lack_of_args"])
                        continue
                    blkl.pop(blkl.index(T[2]))
                    try:
                        sub.send_message(ACHAT, "Deleted {}".format(T[2]), 100)
                    except:
                        pass
                continue

        if i.startswith(".") and not "custom" in blkl:
            print(tokenize(i))
            T = tokenize(i)

            if T[0] == ".list":

                liscu = "[cb]Custom commands\n\n"
                for x in custom:
                    liscu += "{}\n".format(x)
                sub.send_message(ACHAT, liscu)
                continue

            if T[0] == ".del":

                x = params(2, 2, sub, T)
                if x != None:
                    sub.send_message(ACHAT, x)
                    continue
                
                T[1].replace('"', '')

                if T[1] in custom:
                    custom.pop(T[1])
                    F.seek(0);F.truncate()
                    F.write(json.dumps(custom, indent=4))
                else:
                    sub.send_message(ACHAT, "Comando inexistente")
                    continue

            if i[1:] in custom:

                sub.send_message(ACHAT, custom[i[1:]][0])
                continue

    if stop == True:
        break
    old = msg.content

print("Going offline")
F.close()
cli.logout()
del amino
exit()
